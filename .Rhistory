qplot(carat, price, data=dsamp, colour=clarity)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
qplot(myplot)
qplot(myPlot)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(training$Superplasticizer)
log(1)
log(0)
log10(0)
hist(log10(training$Superplasticizer))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
lirary(rCharts)
library(rCharts)
library(airquality)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
dTable(airquality, sPaginationType = "full_numbers")
View(airquality)
## Example 1 Facetted Scatterplot
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
## Example 2 Facetted Barplot
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
require(devtools)
require(devtools)
## Example 1 Facetted Scatterplot
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
## Example 2 Facetted Barplot
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
library(lattice)
library(ggplot2)
## Example 1 Facetted Scatterplot
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
## Example 2 Facetted Barplot
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
## Example 2 Facetted Barplot
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
require(devtools)
install_github('rCharts', 'ramnathv')
library(ggplot2)
library(ramnathv/rCharts)
library(rCharts)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
## Example 2 Facetted Barplot
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
rPlot(as.numeric(SepalLength) ~ as.numeric(SepalWidth) | Species, data = iris, color = 'Species', type = 'point')
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
graph_chart1.addHandler(function(type, e){
var data = e.evtData;
if (type === 'click'){
return alert("You clicked on car with mpg: " + data.mpg.in[0]);
}
})
data(economics, package = "ggplot2")
econ <- transform(economics, date = as.character(date))
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$print("chart2")
data(economics, package = "ggplot2")
econ <- transform(economics, date = as.character(date))
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$print("chart2")
dTable(airquality, sPaginationType = "full_numbers")
require(rCharts)
dt <- dTable(
iris,
bScrollInfinite = T,
bScrollCollapse = T,
sScrollY = "200px",
width = "500px"
)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = 'iris', color = 'Species', type = 'point')
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = Species, type = 'point')
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
install.packages("base64enc")
require(base64enc)
library(devtools)
require(rCharts)
data("airquality")
table1 <- dTable(airquality, sPaginationType = "full_numbers")
table1$save('./fig/table1.html', standalone=TRUE)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = "Species", type = "point")
names(iris) = gsub("\\.", " ", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = "Species", type = "point")
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = "Species", type = "point")
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(trainSA)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial")
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data = trainSA)
model
View(trainSA)
View(testSA)
prediction <- predict(model, testSA)
prediction
values <- testSA$chd
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
function(values,prediction)
print(missClass)
missClass(values,prediction)
prediction <- predict(model, trainSA)
values <- trainSA$chd
missClass(values,prediction)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
train <- vowel.train
test <- vowel.test
View(test)
View(train)
train$y <- as.factor(train$y)
test$y <- as.factor(test$y)
set.seed(33833)
model <- train(y ~ ., data = train, methode = "rf", prox=TRUE)
library(caret)
model <- train(y ~ ., data = train, methode = "rf", prox=TRUE)
require(caret)
model <- train(y ~ ., data = train, methode = "rf", prox=TRUE)
library(randomForest)
model <- train(y ~ ., data = train, methode = "rf", prox=TRUE)
model <- train(y ~ ., data = train, methode = "rf", prox=TRUE)
model
varImp(model)
modvowel <- randomForest(y ~ ., data = train)
order(varImp(modvowel), decreasing = T)
order(varImp(model), decreasing = T)
(varImp(model)
(varImp(model)
varImp(model)
order(varImp(modvowel), decreasing = T)
order(varImp(model), decreasing = T)
valImp(modvowel)
varImp(modvowel)
varImp(model)
order(varImp(modvowel), decreasing = T)
library(AppliedPredictiveModeling)
library(caret)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
install.packages("gbm")
library(gbm)
library(gbm)
library(lubridate)
install.packages("lubridate")
library(lubridate)
library(lubridate)
library(forecast)
install.packages("forecast")
library(forecast)
library(forecast)
library(e1071)
library(e1071)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(AppliedPredictiveModeling)
library(lattice)
library(ggplot2)
library(ggplot2)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
train <- vowel.train
test <- vowel.test
View(train)
View(test)
train$y <- as.factor(train$y)
test$y <- as.factor(test$y)
set.seed(33833)
fitRF <- train(y ~ ., data = train, methode = "rf")
fitRF <- train(y ~ ., data = train, method = "rf")
fitGBM <- train(y ~ ., data = train, method = "gbm")
predRF <- predict(fitRF, test)
predGBM <- predict(fitGBM, test)
confusionMatrix(predRF, test$y)
confusionMatrix(predRF, test$y)[1]
confusionMatrix(predRF, test$y)$overall
confusionMatrix(predGBM, test$y)$overall
confusionMatrix(predRF, test$y)$overall[1]
confusionMatrix(predGBM, test$y)$overall[1]
library(AppliedPredictiveModeling)
library(lattice)
library(ggplot2)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(gbm)
library(lubridate)
library(lubridate)
library(forecast)
library(forecast)
library(e1071)
library(e1071)
library(randomForests)
library(randomForests)
library(randomForest)
library(randomForest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
mod_gbm <- train(y ~ ., data = vowel.train, method = "gbm")
pred_rf <- predict(mod_rf, vowel.test)
pred_gbm <- predict(mod_gbm, vowel.test)
confusionMatrix(pred_rf, vowel.test$y)$overall[1]
confusionMatrix(pred_gbm, vowel.test$y)$overall[1]
pred_rf <- predict(mod_rf, vowel.test)
pred_gbm <- predict(mod_gbm, vowel.test)
confusionMatrix(pred_gbm, vowel.test$y)$overall[1]
confusionMatrix(pred_gbm, vowel.test$y)$overall[1]
accuracyRF = sum(pred_rf == vowel.test$y) / length(pred_rf)
accuracyGBM = sum(pred_gbm == vowel.test$y) / length(pred_gbm)
accuracyRF
accuracyGBM
accuracyAgr = sum(pred_rf == pred_gbm) / length(pred_gbm)
accuracyAgr
vowel.test[pred_rf == pred_gbm,]
subset <- vowel.test[pred_rf == pred_gbm,]
dim(subset)
dim(vowel.test)
accuracyAgr = sum(pred_rf == pred_gbm) / length(pred_gbm)
accuracyAgr
agreeSub = vowel.test[pred_RF == pred_GBM,]
pred_comb = train(y ~ ., data = agreeSub, method = "gam")
agreeSub = vowel.test[pred_rf == pred_gbm,]
pred_comb = train(y ~ ., data = agreeSub, method = "gam")
pred_comb = train(y ~ ., data = agreeSub, method = "gbm")
comb_accuracy = sum(pred_comb == agreeSub$y) / length(pred_comb)
comb_accuracy
pred_comb = train(y ~ ., data = agreeSub, method = "rf")
pred_comb = predict(model_rf, agreeSub)
pred_comb = predict(pred_rf, agreeSub)
pred_comb2 = predict(pred_rf, agreeSub)
pred_comb
pred_comb2
pred_comb2 = predict(pred_gbm, agreeSub)
pred_comb2
pred_comb <- predict(pred_rf, agreeSub)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
library(lubridate)  # For year() function below
data = read.csv("~/Desktop/data.csv")
training = data[year(data$date) < 2012,]
testing = data[(year(data$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
View(data)
View(testing)
View(training)
library(forecast)
setwd("~/Desktop/Kosmas/Data_science/Practical Machine Learning")
library (tree)
library (ISLR)
attach (Carseats )
data(Carseats)
attach (Carseats )
View(Carseats)
High=ifelse (Sales <=8," No"," Yes ")
Carseats =data.frame(Carseats ,High)
View(Carseats)
tree.carseats =tree(High∼.-Sales ,Carseats )
Carseats2 <- Carseats[,-Sales]
Carseats2 <- Carseats[-Sales]
View(Carseats2)
Carseats2 <- Carseats[-Sales,]
View(Carseats2)
Carseats2 <- Carseats[,-Sales]
Carseats2 <- Carseats[,c(2,3,4,5,6,7,8,9,10,11,12)]
View(Carseats2)
View(Carseats)
View(Carseats)
View(Carseats2)
View(Carseats)
View(Carseats2)
tree.carseats =tree(High∼. ,Carseats2 )
library(tree)
tree.carseats =tree(High∼. ,Carseats2 )
treeCarseats =tree(High∼. ,Carseats2 )
treeCarseats =tree(High ∼ .,Carseats2 )
?tree
treeCarseats =tree(High ∼ .,Carseats2 )
treeCarseats =tree( Carsears$High ∼ .,Carseats2 )
treeCarseats =tree(High ~.,Carseats2 )
summary(treeCarseats)
treeCarseats
summary(treeCarseats)
plot(treeCarseats)
text(tree.carseats ,pretty =0)
text(treeCarseats ,pretty =0)
set.seed(2)
train=sample (1: nrow(Carseats ), 200)
train=sample (1: nrow(Carseats2 ), 200)
library(randomForest)
library(randomForest)
set.seed(1)
data(Boston)
library (MASS)
data(Boston)
attache(Boston)
atache(Boston)
attach(Boston)
View(Boston)
bag.boston =randomForest(medv∼.,data=Boston ,subset =train ,                         mtry=13, importance =TRUE)
bag.boston =randomForest(medv~.,data=Boston ,subset =train ,mtry=13, importance =TRUE)
train = sample (1: nrow(Boston ), nrow(Boston )/2)
bag.boston =randomForest(medv~.,data=Boston ,subset =train ,mtry=13, importance =TRUE)
bag.boston
bag.boston
trainInt <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testInt <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
train <- read.csv(url(trainInt), na.strings=c("NA",""))
test <- read.csv(url(testInt), na.strings=c("NA",""))
test  <- test[ , colSums(is.na(train)) == 0]
train <- train[ , colSums(is.na(train)) == 0]
train <- train[,-c(1:7)]
test <- test[,-c(1:7)]
library(lattice)
library(ggplot2)
library(caret)
set.seed(1)
forTrain <- createDataPartition(y=train$classe, p=0.7, list=FALSE)
train <- train[forTrain,]
crossValidation <- train[-forTrain,]
library(randomForest)
model <- randomForest(classe ~ ., data=train, ntree=100, importance=TRUE)
varImpPlot(model)
v <- varImpPlot(model)
v
varImp(model)
v
head(v)
plot(v)
varImpPlot(model)
trainInt <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testInt <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
train <- read.csv(url(trainInt), na.strings=c("NA",""))
test <- read.csv(url(testInt), na.strings=c("NA",""))
test  <- test[ , colSums(is.na(train)) == 0]
train <- train[ , colSums(is.na(train)) == 0]
train <- train[,-c(1:7)]
test <- test[,-c(1:7)]
library(lattice)
library(ggplot2)
library(caret)
set.seed(1)
forTrain <- createDataPartition(y=train$classe, p=0.7, list=FALSE)
train <- train[forTrain,]
crossValidation <- train[-forTrain,]
library(randomForest)
model <- randomForest(classe ~ ., data=train, ntree=100, importance=TRUE)
varImpPlot(model)
pred <- predict(model, crossValidation)
confus <- confusionMatrix(crossValidation$classe, pred)
confus
confus$Overall
confus[2]
confus[3]
confus$overall
confus$overall[1]
outOfSample <- 1 - accuracy
accuracy <- confus$overall[1]
outOfSample <- 1 - accuracy
pred <- predict(model, crossValidation)
confus <- confusionMatrix(crossValidation$classe, pred)
accuracy <- confus$overall[1]
accuracy
outOfSample <- 1 - accuracy
outOfSample
accuracy
accuracy[2]
accuracy[1]
accuracy[2,1]
type(accuracy)
accuracy
outOfSample <- 1 - accuracy
outOfSample
outOfSample <- 1 - accuracy
as.numeric(outOfSample)
as.numeric(outOfSample)
predTest <- predict(model, test)
as.numeric(predTest)
outOfSample <- 1 - accuracy
as.numeric(outOfSample)
pred <- predict(model, crossValidation)
confus <- confusionMatrix(crossValidation$classe, pred)
accuracy <- confus$overall[1]
outOfSample <- 1 - as.numeric(accuracy)
as.numeric(outOfSample)
pred <- predict(model, crossValidation)
confus <- confusionMatrix(crossValidation$classe, pred)
confus
accuracy <- confus$overall[1]
outOfSample <- 1 - as.numeric(accuracy)
as.numeric(outOfSample)
pred <- predict(model, crossValidation)
confus <- confusionMatrix(crossValidation$classe, pred)
accuracy <- confus$overall[1]
accuracy
